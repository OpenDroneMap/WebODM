# dsm_file: GeoTIFF DSM containing the surface to calculate the levels of elevation
# interval: Interval that will split the different levels
# format: OGR output format
# noise_filter_size: Area in meters where we will clean up noise in the contours
# epsg: target EPSG code
# python_script_path: Path of the python script
# python_path: Path to python modules
# dtm: Optional text to include the GeoTIFF DTM
#
# ------
# output: If successful, prints the full path to the elevation map file. If an error.txt file is found, print its content. Otherwise, print 'error'"

ext=""
if [ "${format}" = "GeoJSON" ]; then
    ext="json"
elif [ "${format}" = "GPKG" ]; then
    ext="gpkg"
elif [ "${format}" = "DXF" ]; then
    ext="dxf"
elif [ "${format}" = "ESRI Shapefile" ]; then
    ext="shp"
fi

PYTHONPATH="${python_path}" "${python_script_path}" "${dsm_file}" ${interval} --epsg ${epsg} --noise_filter_size ${noise_filter_size} ${dtm} -o output.json

if [ $$ext != "json" ]; then
  ogr2ogr -f "${format}" output.$$ext output.json > /dev/null
fi  

if [ -e "output.$$ext" ]; then
    # ESRI ShapeFile extra steps to compress into a zip archive
    # we leverage Python's shutil in this case
    if [ "${format}" = "ESRI Shapefile" ]; then
        ext="zip"
        mkdir elevationmap/
        mv output* elevationmap/
        echo "import shutil;shutil.make_archive('output', 'zip', 'elevationmap/')" | python
    fi

    echo "$$(pwd)/output.$$ext"
elif [ -e "error.txt" ]; then
    cat "error.txt"
else
    echo "error"
fi
